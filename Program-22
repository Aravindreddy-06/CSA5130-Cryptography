# Permutations
P10 = [3, 5, 2, 7, 4, 10, 1, 9, 8, 6]
P8  = [6, 3, 7, 4, 8, 5, 10, 9]
IP  = [2, 6, 3, 1, 4, 8, 5, 7]
IP_inv = [4, 1, 3, 5, 7, 2, 8, 6]
EP  = [4, 1, 2, 3, 2, 3, 4, 1]
P4  = [2, 4, 3, 1]

# S-boxes
S0 = [
    [1, 0, 3, 2],
    [3, 2, 1, 0],
    [0, 2, 1, 3],
    [3, 1, 3, 2]
]

S1 = [
    [0, 1, 2, 3],
    [2, 0, 1, 3],
    [3, 0, 1, 0],
    [2, 1, 0, 3]
]

# Functions
def permute(bits, pattern):
    return [bits[i - 1] for i in pattern]

def left_shift(bits, shifts):
    return bits[shifts:] + bits[:shifts]

def xor(bits1, bits2):
    return [b1 ^ b2 for b1, b2 in zip(bits1, bits2)]

def sbox_lookup(bits, box):
    row = (bits[0] << 1) + bits[3]
    col = (bits[1] << 1) + bits[2]
    val = box[row][col]
    return [val >> 1 & 1, val & 1]

def generate_keys(key):
    key = permute(key, P10)
    left = key[:5]
    right = key[5:]
    left1 = left_shift(left, 1)
    right1 = left_shift(right, 1)
    K1 = permute(left1 + right1, P8)
    left2 = left_shift(left1, 2)
    right2 = left_shift(right1, 2)
    K2 = permute(left2 + right2, P8)
    return K1, K2

def fk(bits, key):
    left = bits[:4]
    right = bits[4:]
    temp = permute(right, EP)
    temp = xor(temp, key)
    s0 = sbox_lookup(temp[:4], S0)
    s1 = sbox_lookup(temp[4:], S1)
    p4 = permute(s0 + s1, P4)
    return xor(left, p4) + right

def sdes_encrypt(plain, K1, K2):
    bits = permute(plain, IP)
    bits = fk(bits, K1)
    bits = bits[4:] + bits[:4]  # Switch
    bits = fk(bits, K2)
    return permute(bits, IP_inv)

def sdes_decrypt(cipher, K1, K2):
    bits = permute(cipher, IP)
    bits = fk(bits, K2)
    bits = bits[4:] + bits[:4]
    bits = fk(bits, K1)
    return permute(bits, IP_inv)

def str_to_bits(s):
    return [int(b) for b in s]

def bits_to_str(bits):
    return ''.join(str(b) for b in bits)

# CBC Mode Encryption
def cbc_encrypt(plaintext_blocks, key_bits, iv):
    K1, K2 = generate_keys(key_bits)
    cipher_blocks = []
    prev = iv
    for block in plaintext_blocks:
        xored = xor(block, prev)
        encrypted = sdes_encrypt(xored, K1, K2)
        cipher_blocks.append(encrypted)
        prev = encrypted
    return cipher_blocks

# CBC Mode Decryption
def cbc_decrypt(cipher_blocks, key_bits, iv):
    K1, K2 = generate_keys(key_bits)
    plaintext_blocks = []
    prev = iv
    for block in cipher_blocks:
        decrypted = sdes_decrypt(block, K1, K2)
        plain = xor(decrypted, prev)
        plaintext_blocks.append(plain)
        prev = block
    return plaintext_blocks

# === TEST DATA ===
key_str =  "0111111101"
iv_str =   "10101010"
plain1 =   "00000001"
plain2 =   "00100011"

key_bits = str_to_bits(key_str)
iv_bits = str_to_bits(iv_str)
pt_blocks = [str_to_bits(plain1), str_to_bits(plain2)]

# Encrypt
cipher_blocks = cbc_encrypt(pt_blocks, key_bits, iv_bits)

# Show ciphertext
print("Encrypted CBC blocks:")
for i, block in enumerate(cipher_blocks):
    print(f"C{i+1}: {bits_to_str(block)}")

# Decrypt
decrypted_blocks = cbc_decrypt(cipher_blocks, key_bits, iv_bits)

# Show decrypted plaintext
print("\nDecrypted plaintext blocks:")
for i, block in enumerate(decrypted_blocks):
    print(f"P{i+1}: {bits_to_str(block)}")
