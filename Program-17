# DES standard shift schedule for each round
shift_schedule = [1, 1, 2, 2, 2, 2, 2, 2,
                  1, 2, 2, 2, 2, 2, 2, 1]

# Sample 64-bit key (as a string of 0s and 1s)
initial_key = "0001001100110100010101110111100110011011101111001101111111110001"

# Remove parity bits (every 8th bit) to get 56-bit key
key_56 = ""
for i in range(64):
    if (i + 1) % 8 != 0:
        key_56 += initial_key[i]

# Split into left and right halves (28 bits each)
C = key_56[:28]
D = key_56[28:]

# Generate 16 subkeys for encryption
keys = []
for i in range(16):
    shift = shift_schedule[i]

    # Left circular shift
    C = C[shift:] + C[:shift]
    D = D[shift:] + D[:shift]

    # Combine halves (56-bit key) -> just simulate subkey
    subkey = C + D
    keys.append(subkey)

# Print encryption keys
print("Encryption Subkeys (K1 to K16):")
for i in range(16):
    print(f"K{i+1}: {keys[i]}")

# For decryption: keys are used in reverse order
print("\nDecryption Subkeys (used in reverse order):")
for i in range(16):
    print(f"K{i+1}: {keys[15 - i]}")
