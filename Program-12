import numpy as np

# Step 1: Input and preprocess message
plaintext = "meet me at the usual place at ten rather than eight oclock"
plaintext = plaintext.replace(" ", "").lower()

# Pad with 'x' to make even length
if len(plaintext) % 2 != 0:
    plaintext += 'x'

# Step 2: Define key matrix
key = np.array([[9, 4],
                [5, 7]])

# Step 3: Encryption
ciphertext = ""
print("Encryption Steps:\n")
for i in range(0, len(plaintext), 2):
    a = ord(plaintext[i]) - ord('a')
    b = ord(plaintext[i+1]) - ord('a')
    
    x = (key[0][0]*a + key[0][1]*b) % 26
    y = (key[1][0]*a + key[1][1]*b) % 26
    
    print(f"{plaintext[i]}({a}) {plaintext[i+1]}({b}) -> [{x}, {y}] -> {chr(x+ord('a'))}{chr(y+ord('a'))}")
    
    ciphertext += chr(x + ord('a')) + chr(y + ord('a'))

print("\nEncrypted ciphertext:\n", ciphertext)

# Step 4: Decryption
# Compute determinant and its inverse mod 26
det = (key[0][0]*key[1][1] - key[0][1]*key[1][0]) % 26

# Find modular inverse of det manually
for i in range(1, 26):
    if (det * i) % 26 == 1:
        det_inv = i
        break

# Compute adjugate matrix
adj = np.array([[key[1][1], -key[0][1]],
                [-key[1][0], key[0][0]]])

# Apply modulo 26 and make sure values are positive
inv_key = (det_inv * adj) % 26
inv_key = inv_key.astype(int)

# Step 5: Decrypt
decrypted = ""
print("\nDecryption Steps:\n")
for i in range(0, len(ciphertext), 2):
    a = ord(ciphertext[i]) - ord('a')
    b = ord(ciphertext[i+1]) - ord('a')
    
    x = (inv_key[0][0]*a + inv_key[0][1]*b) % 26
    y = (inv_key[1][0]*a + inv_key[1][1]*b) % 26
    
    print(f"{ciphertext[i]}({a}) {ciphertext[i+1]}({b}) -> [{x}, {y}] -> {chr(x+ord('a'))}{chr(y+ord('a'))}")
    
    decrypted += chr(x + ord('a')) + chr(y + ord('a'))

print("\nDecrypted plaintext:\n", decrypted)
