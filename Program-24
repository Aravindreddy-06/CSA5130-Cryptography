# Step 1: Inputs
e = 31
n = 3599

# Step 2: Trial-and-error factorization
for p in range(2, 100):
    if n % p == 0:
        q = n // p
        print(f"Factors found: p = {p}, q = {q}")
        break

# Step 3: Compute φ(n)
phi = (p - 1) * (q - 1)
print("φ(n):", phi)

# Step 4: Extended Euclidean Algorithm
def extended_gcd(a, b):
    if b == 0:
        return a, 1, 0
    gcd, x1, y1 = extended_gcd(b, a % b)
    x = y1
    y = x1 - (a // b) * y1
    return gcd, x, y

gcd, x, y = extended_gcd(e, phi)

# Ensure d is positive
d = x % phi
print("Private key (d):", d)

# Final RSA Keypair
print("\nRSA Key Pair:")
print(f"Public Key: (e = {e}, n = {n})")
print(f"Private Key: (d = {d}, n = {n})")
